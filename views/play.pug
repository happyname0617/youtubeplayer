doctype html
head
  // Latest compiled and minified CSS
  script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')  
  link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')
  link(rel='stylesheet', href='/css/typingtube.css')
  // Optional theme
  link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css', integrity='sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp', crossorigin='anonymous')
  // Latest compiled and minified JavaScript
  script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa', crossorigin='anonymous')


body
  nav.navbar.navbar-inverse
    .container-fluid
      .navbar-header
        button.navbar-toggle.collapsed(type='button', data-toggle='collapse', data-target='#navbar', aria-expanded='false', aria-controls='navbar')
          span.sr-only Toggle navigation
          span.icon-bar
          span.icon-bar
          span.icon-bar
        a.navbar-brand(href='/') TypingTube.com alpha 
      #navbar.navbar-collapse.collapse
        ul.nav.navbar-nav.navbar-right
          li.active
            a(href='/') Home
          li
            a(href='/feed') Feed
          li
            a(href='/forum') Forum
          li
            a(href='/about') About
          li.dropdown
            a.dropdown-toggle(href='#', data-toggle='dropdown')
              | MyPage
              span.caret
            ul.dropdown-menu
              li
                a(href='/auth/logout') Logout
  .container.theme-showcase(role='main')
    .row
      .col-md-2
      .col-md-8
        .embed-responsive.embed-responsive-16by9
          #player
        .progress
          .progress-bar(role='progressbar', aria-valuenow='0', aria-valuemin='0', aria-valuemax='100', style='width: 0%;')
            | 60%
        p#playcontrol
          .btn-group.btn-group-justified(role='group', aria-label='...')
            .btn-group(role='group')
              button.repeatPlay.btn.btn-primary START
            .btn-group(role='group')
              button.toBegin.btn.btn-default |<
            .btn-group(role='group')
              button.prev.btn.btn-default <
            .btn-group(role='group')
              button.next.btn.btn-default >
            .btn-group(role='group')
              button.toEnd.btn.btn-default >|
        p
          ul.sentence(text-align:"center")
        p#underline_str(hidden)
        p#solution_str
        textarea#inputstr(rows='4', cols='50')
        p
          button.btn.btn-default.btn-block#answer Check Answer
        .well
          h4 Play Option
          label rest time for repeating
            select.control_restTime
              option(value='0.0') 0.0 sec
              option(value='0.5') 0.5 sec
              option(value='1.0', selected) 1.0 sec
              option(value='3.0') 3.0 sec
              option(value='5.0') 5.0 sec
          .checkbox
            label
              input#answerToggle(type='checkbox')
              |  Show/Hide Answer
          .checkbox
            label
              input#EditToggle(type='checkbox')
              |  Show/Hide Subtible Edit Panel
        .well#editSubtitle
          h4 Edit Subtitle
          .btn-group.btn-group-justified(role='group', aria-label='...')
            .btn-group(role='group')
              button.leftboder_2left01.btn.btn-default  <<0.1s
            .btn-group(role='group')
              button.btn.btn-default.leftboder_2left03  <<0.3s
            .btn-group(role='group')
              button.btn.btn-default.leftboder_2right01 >>0.1
            .btn-group(role='group')
              button.btn.btn-default.leftboder_2right03 >>0.3
            .btn-group(role='group')
              button.btn.btn-default.mergewithleft Merge to left
            .btn-group(role='group')
              button.btn.btn-default.captiondelete Delete
            .btn-group(role='group')
              button.btn.btn-default.rightboder_2left01  0.1<<
            .btn-group(role='group')
              button.btn.btn-default.rightboder_2left03  0.3<<
            .btn-group(role='group')
              button.btn.btn-default.rightboder_2right01 0.1>>
            .btn-group(role='group')
              button.btn.btn-default.rightboder_2right03 0.3>>
          .debug
          p
            button.btn.btn-default.btn-block.save save
      .col-md-2
    script.
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-100905207-1', 'auto');
      ga('send', 'pageview');
    script.
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      var userid = 'bskim'
      var margin = 0.2; //sec
      var restTime = 1.0;
      var videoID = '#{id}';
      //var times = [['2.216','3.576'],['03.576','05.616'],['05.616','8.096'],['8.336','10.336'],['10.616','12.616'],['13.576','15.496']];
      var videoRecord = !{mytime};
      var c_letter='letter'
      if(videoRecord.videoCaptionLangCode=='ko')
      {
        c_letter='letter nonAlphbetLetter'
      }
        
      var times = videoRecord.caption;
      var totalCount = times.length;
      var currIdx = videoRecord.currentIndex;
      function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
      height: '390',
      width: '640',
      playerVars : {
                  'autoplay' : 0,
                  'rel' : 0,
                  'showinfo' : 0,
                  'showsearch' : 0,
                  'controls' : 1,
                  'loop' : 0,
                  'enablejsapi' : 1,
                  'disablekb': 1,
                  'fs':0
                },
      videoId: videoRecord.YouTubeVideoID,
      events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
      }
      });
      }
      function updateInput()
      {
         var str = myconvert(times[currIdx][2],$('#inputstr').val());
          console.log(str);
          
          var html='';
          for(var i=0; i<str.length;i++)
          {
            var tempclass = '';
            if(str[i]==marker)
            {
              html+=`<li class="${c_letter} normal">&nbsp</li>`;                
            }
            else if(str[i]==' ')
            {
              html+=`<li class="space">${str[i]}</li>`;                
              
            }
            else
            {
              html+=`<li class="${c_letter} normal">${str[i]}</li>`;                
            }

          }
            $('.sentence').html(html)
          $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val())) 
      }
        
      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
      //event.target.playVideo();
      //player.seekTo(getStartTime(currIdx,margin))
      $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()))
      updateInput();
      }
      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      var timer;
      var timersleep ;
      function onPlayerStateChange(event) {
        try
        {
          player.unloadModule("captions");  
          player.unloadModule("cc"); 
        }
        catch (exception)
        {
          LoggerUtil.logError("Error when trying to unloadModule youtube captions: " + exception);
        }

        if (event.data == YT.PlayerState.PLAYING && !done) {
        //setTimeout(repeatVideo, getDuration(currIdx,margin))
        done = true;
        }

      }

      function repeatAfterSec()
      {
        player.pauseVideo();
        clearTimeout(timer);
        timersleep = setTimeout(repeatVideo,restTime*1000);
      }

      function repeatVideoFromClose2End(time,) {
        player.seekTo(time);
        player.playVideo();
        timer = setTimeout(repeatAfterSec,getDuration(currIdx,margin));
        clearTimeout(timersleep);
        // $('.debug').text(currIdx+'/'+totalCount)

      }
      
      function updateProgressbar()
      {
        $('.progress-bar').attr('aria-valuenow',currIdx);
        $('.progress-bar').attr('aria-valuemax',times.length);
        $('.progress-bar').css('width', (currIdx+1)/times.length*100+'%');
        $('.progress-bar').text(currIdx+1+'/'+times.length);        
        
      }
      function repeatVideo() {
        player.seekTo(getStartTime(currIdx,margin));
        player.playVideo();
        timer = setTimeout(repeatAfterSec,getDuration(currIdx,margin));
        clearTimeout(timersleep);
        //$('.debug').text(currIdx+'/'+totalCount)
        updateProgressbar();
        $('#solution_str').text(times[currIdx][2]);

      }

      function getStartTime(index,margin)
      {
      var start = parseFloat(times[index][0])-margin
      return start>=0?start:0
      }
      function getEndTime(index,margin)
      {
      return parseFloat(times[index][1])+margin;
      }
      function getDuration(index,margin)
      {
      var duration = (getEndTime(index,margin)-getStartTime(index,margin))*1000;
      //console.log(duration);
      return duration;
      }

      var marker = '+';
      
      function myconvert(solution, input)
      {
      console.log('solution:',solution)
      console.log('input:',input)
      solution = solution.trim();
      input = input.trim();
      //console.log(typeof solution);
      var temp = solution.replace(/[\u3131-\u314e|\u314f-\u3163|\uac00-\ud7a3|\w|äöüÄÖÜß|\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/gi,marker);
      //console.log('temp:',temp)
      // japanese \u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf
      // korean \u3131-\u314e|\u314f-\u3163|\uac00-\ud7a3
      var temp2 = input.replace(/[^\u3131-\u314e|\u314f-\u3163|\uac00-\ud7a3|\w|äöüÄÖÜß|\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/gi,'')
      //console.log('temp2:',temp2)
      for(var i=0; i<temp2.length; i++)
      {
      temp = temp.replace(marker,temp2[i])
      }
      console.log('result:',temp)
      return temp;
      }
      
      function evaluateAnswer(solution, input)
      {
        var result =[];
        var strRef = myconvert(solution, solution);
        var strIn = myconvert(solution, input);
        
        for(var i=0;i<strRef.length;i++)
        {
          if(strRef[i]==strIn[i])
            result.push(true);
          else
            result.push(false);
        }
        return result;
      }
  
      var INPUTMODE = {
        IDLE : {value: 0, name: "idle status", code: "i"}, 
        ANSWER: {value: 1, name: "answer status", code: "a"}, 
      };
      
      var currentInputMode = INPUTMODE.IDLE;
      $(document).ready(function(){
        $('.player').addClass('embed-responsive-item')
        updateProgressbar();
        $('#solution_str').text(times[currIdx][2]);
        $('#dictationarea').hide();
        $('#solution_str').toggle();
        $('#editSubtitle').toggle();
        $('#inputstr').val(times[currIdx][3]);
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()));
        updateInput();
        
        $("html").on('keyup', function (e) {
          if (e.ctrlKey && e.keyCode == 37) {
            console.log('ctrl + left key typed');
            $('.prev').click();
            currentInputMode=INPUTMODE.IDLE;
            
          }
          if (e.ctrlKey && e.keyCode == 39) {
            console.log('ctrl + right key typed');
            $('.next').click();
            currentInputMode=INPUTMODE.IDLE;
          }
        });

        $("#inputstr").on('keyup', function (e) {
          if (e.keyCode != 13) {
            updateInput();
          }

        });
        

        $("#inputstr").on('keypress', function (e) {
         
          if (e.keyCode == 13) {
            e.preventDefault();
            console.log('enter key typed');
            if(currentInputMode==INPUTMODE.IDLE)
            {
                $('#answer').click();
            }
            // else if(currentInputMode==INPUTMODE.ANSWER)
            // {
            //   $('.next').click();
            //   currentInputMode=INPUTMODE.IDLE;
            // }
          }

        });
        
      $('#answerToggle').click(function(){
        $('#solution_str').toggle();
      })
      $('#EditToggle').click(function(){
        $('#editSubtitle').toggle();
      })

      $('#answer').click(function(){
        $('#solution_str').text(times[currIdx][2]);
        times[currIdx][3] = $('#inputstr').val();
        var str= myconvert(times[currIdx][2],$('#inputstr').val())
        var result = evaluateAnswer(times[currIdx][2],$('#inputstr').val());
        var html='';
        for(var i=0; i<result.length;i++)
        {
          var tempclass = '';
          if(str[i]==marker)
          {
            html+=`<li class="${c_letter} incorrect">&nbsp</li>`;                
          }
          else if(str[i]==' ')
          {
            html+=`<li class="space">${str[i]}</li>`;                
            
          }
          else if(result[i])
          {
            html+=`<li class="${c_letter} correct">${str[i]}</li>`;                
          }
          else
          {
            html+=`<li class="${c_letter} incorrect">${str[i]}</li>`;                
          }

        }

        $('.sentence').html(html)
         var result = evaluateAnswer(times[currIdx][2],$('#inputstr').val());
         var allTrue =result.reduce(function(acc,curr){return acc&&curr},true);
         console.log('allTrue:'+allTrue);
          if(allTrue){
            $('.save').click();
            alert("Super! Hit Enter key to the next sentence!");
            $('.next').click();
            //currentInputMode=INPUTMODE.ANSWER;
          }

        // $('#inputstr').val();
        // times[currIdx].push
      })

      $('.toBegin').click(function(){
        times[currIdx][3] = $('#inputstr').val()
        currIdx=0;
        //$('.debug').text(currIdx+'/'+totalCount)
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
        //$('#solution_str').text('');
        $('#inputstr').val(times[currIdx][3])
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()));
        updateInput();
      })
      $('.toEnd').click(function(){
        times[currIdx][3] = $('#inputstr').val()
        currIdx=times.length-1;
        //$('.debug').text(currIdx+'/'+totalCount)
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
        //$('#solution_str').text('');
        $('#inputstr').val(times[currIdx][3])
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()));
        updateInput();
      })


      $('.next').click(function(){
        times[currIdx][3] = $('#inputstr').val()
        currIdx=Math.min(currIdx+1,times.length-1);
        //$('.debug').text(currIdx+'/'+totalCount)
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
        //$('#solution_str').text('');
        $('#inputstr').val(times[currIdx][3])
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()));
        updateInput();
      })

      $('.prev').click(function(){
        times[currIdx][3] = $('#inputstr').val()
        currIdx=Math.max(currIdx-1,0);
        currIdx=currIdx>0?currIdx:0
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
        //$('#solution_str').text('')
        $('#inputstr').val(times[currIdx][3]);
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()))
        updateInput();
      })
  
  

      $('.rightboder_2right01').click(function(){
        $('.debug').text('rightboder_2right01')
        times[currIdx][1] = getEndTime(currIdx,0)+0.1;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo()
      })
      
      $('.rightboder_2right03').click(function(){
        $('.debug').text('rightboder_2right03')
        times[currIdx][1] = getEndTime(currIdx,0)+0.3;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })

      $('.rightboder_2left01').click(function(){
        $('.debug').text('rightboder_2left01')
        times[currIdx][1] = getEndTime(currIdx,0)-0.1;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })
      
      $('.rightboder_2left03').click(function(){
        $('.debug').text('rightboder_2left03')
        times[currIdx][1] = getEndTime(currIdx,0)-0.3;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })

      $('.leftboder_2left01').click(function(){
        $('.debug').text('leftboder_2left01')
        times[currIdx][0] = getStartTime(currIdx,0)-0.1;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })
      
      $('.leftboder_2left03').click(function(){
        $('.debug').text('leftboder_2left03')
        times[currIdx][0] = getStartTime(currIdx,0)-0.3;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })

      $('.leftboder_2right01').click(function(){
        $('.debug').text('leftboder_2right01')
        times[currIdx][0] = getStartTime(currIdx,0)+0.1;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })
      
      $('.leftboder_2right03').click(function(){
        $('.debug').text('leftboder_2right03')
        times[currIdx][0] = getStartTime(currIdx,0)+0.3;
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })
      
      $('.captiondelete').click(function(){
        $('.debug').text('captiondelete')
        times.splice( currIdx, 1 );
        clearTimeout(timer);
        clearTimeout(timersleep);
        //$('#solution_str').text('')
        $('#inputstr').val('')
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()))
        updateInput();
        repeatVideo();
      })
      
      $('.mergewithleft').click(function(){
        $('.debug').text('mergewithleft')
        times[currIdx][3] = $('#inputstr').val();
        times[currIdx-1][1] = times[currIdx][1];
        times[currIdx-1][2] = times[currIdx-1][2]+' '+times[currIdx][2];
        times[currIdx-1][3] = times[currIdx-1][3]+' '+times[currIdx][3];
        times.splice( currIdx, 1 );
        currIdx = currIdx-1;
        clearTimeout(timer);
        clearTimeout(timersleep);
        //$('#solution_str').text('')
        $('#inputstr').val(times[currIdx][3])
        $('#underline_str').text(myconvert(times[currIdx][2],$('#inputstr').val()))
        updateInput();

        repeatVideo();
      })

      $('.control_margin').change(function(){
        // $('.debug').text('control_margin')
        // margin =  $('.control_margin').val();
        // console.log('margin:',margin)
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })

      $('.control_restTime').change(function(){
        $('.debug').text('control_restTime')
        restTime =  $('.control_restTime').val();
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
      })

      function RepeatPlay()
      {
         $('.debug').text('repeatPlay')
        clearTimeout(timer);
        clearTimeout(timersleep);
        repeatVideo();
 
      }
      $('.repeatPlay').click(function(){
        if($('.repeatPlay').text()=='PAUSE')
        {
          RepeatPause();
          $('.repeatPlay').text('START');
          
        }
        else
        {
          RepeatPlay();
          $('.repeatPlay').text('PAUSE');
        }
      })

      function RepeatPause(){
        $('.debug').text('repeatPause')
        clearTimeout(timer);
        clearTimeout(timersleep);
        player.pauseVideo();
      }


      $('.save').click(function(){
        $('.debug').text('save');
        times[currIdx][3] = $('#inputstr').val();
        videoRecord.currentIndex = currIdx;
        videoRecord.caption = times;
        $.post( "/update", {videoRecord:JSON.stringify(videoRecord)} );
      })



      
   
      })
